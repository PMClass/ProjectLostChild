//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Companion 2D Controller/Input System/CompanionInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CompanionInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CompanionInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CompanionInputActions"",
    ""maps"": [
        {
            ""name"": ""Companion"",
            ""id"": ""089d495f-9069-46af-b06b-29f4bda9ff18"",
            ""actions"": [
                {
                    ""name"": ""Interacting"",
                    ""type"": ""Button"",
                    ""id"": ""3aa2edf6-6f29-4461-8805-3ab20b48ab62"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""bd99e4c3-7435-4146-9b2e-f53bf2d044ae"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""84489eda-7a54-4930-8972-5c2b49e8d849"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interacting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88bffdd5-0927-43f3-b400-32dd127d9693"",
                    ""path"": ""<Mouse>/radius/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Companion
        m_Companion = asset.FindActionMap("Companion", throwIfNotFound: true);
        m_Companion_Interacting = m_Companion.FindAction("Interacting", throwIfNotFound: true);
        m_Companion_Move = m_Companion.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Companion
    private readonly InputActionMap m_Companion;
    private List<ICompanionActions> m_CompanionActionsCallbackInterfaces = new List<ICompanionActions>();
    private readonly InputAction m_Companion_Interacting;
    private readonly InputAction m_Companion_Move;
    public struct CompanionActions
    {
        private @CompanionInputActions m_Wrapper;
        public CompanionActions(@CompanionInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interacting => m_Wrapper.m_Companion_Interacting;
        public InputAction @Move => m_Wrapper.m_Companion_Move;
        public InputActionMap Get() { return m_Wrapper.m_Companion; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CompanionActions set) { return set.Get(); }
        public void AddCallbacks(ICompanionActions instance)
        {
            if (instance == null || m_Wrapper.m_CompanionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CompanionActionsCallbackInterfaces.Add(instance);
            @Interacting.started += instance.OnInteracting;
            @Interacting.performed += instance.OnInteracting;
            @Interacting.canceled += instance.OnInteracting;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(ICompanionActions instance)
        {
            @Interacting.started -= instance.OnInteracting;
            @Interacting.performed -= instance.OnInteracting;
            @Interacting.canceled -= instance.OnInteracting;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(ICompanionActions instance)
        {
            if (m_Wrapper.m_CompanionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICompanionActions instance)
        {
            foreach (var item in m_Wrapper.m_CompanionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CompanionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CompanionActions @Companion => new CompanionActions(this);
    public interface ICompanionActions
    {
        void OnInteracting(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
